@inject MagusTtkContext TtkContext
@implements IDisposable

<div>
    @if (ttkCharacter != null)
    {
        <RadzenCard Style="width:550px;">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center">Tulajdonság</th>
                        <th class="text-center">Kaszt</th>
                        <th class="text-center">Faj</th>
                        <th class="text-center">Elosztás</th>
                        <th colspan="2" class="text-center">Szintlépés</th>
                        <th class="text-center">Érték</th>
                        <th class="text-center">Próbához</th>
                    </tr>
                    <tr>
                        <th />
                        <th />
                        <th />
                        <th />
                        <th class="text-center">Kapott</th>
                        <th class="text-center">Vett</th>
                        <th />
                        <th />
                    </tr>
                </thead>
                <tbody>
                    @foreach (var kvp in ttkCharacter.Abilities)
                    {
                        System.Console.WriteLine($"Rendering ability '{kvp.Key}'...");
                        if (kvp.Value == null)
                            continue;

                        var abDef = kvp.Value?.Definition;
                        var avc = kvp.Value.GetValueComponentOrThrow(AbilityValueComponentTypeEnum.CharacterCreation);
                        var avcLevelUp = kvp.Value.GetValueComponentOrThrow(AbilityValueComponentTypeEnum.LevelUp);
                        var avcBoughtFromSp = kvp.Value.GetValueComponentOrThrow(AbilityValueComponentTypeEnum.BoughtFromSP);
                    <tr>
                        <td class="align-middle">@((abDef == null) ? string.Empty : abDef.Name ?? kvp.Key)</td>
                        <td class="align-middle text-center">@(((ttkCharacter.Class == null) || (abDef == null)) ? string.Empty : ttkCharacter.Class.Abilities?.GetValueOrDefault(abDef.Code))</td>
                        <td class="align-middle text-center">@(((ttkCharacter.Race?.AbilityModifiers == null) || (abDef == null)) ? string.Empty : (ttkCharacter.Race.AbilityModifiers.TryGetValue(abDef.Code, out var raceModifier) ? raceModifier.ToString("+##;-##;") : string.Empty))</td>
                        <td>
                            <RadzenNumeric Style="width:80px;" TValue="int" Min=1 Max=5 Value=@avc.Value ValueExpression=@(() => avc.Value) ValueChanged=@(args => OnAbilityDistributedPointsChanging(kvp.Value, args)) Change=@(args => OnChange(args, $"{abDef?.Name ?? kvp.Key}")) />
                        </td>
                        <td class="align-middle text-center">@(avcLevelUp.Value.ToString("+##;-##; "))</td>
                        <td class="align-middle text-center">@(avcBoughtFromSp.Value.ToString("+##;-##; "))</td>
                        <td class="h2 align-middle text-center">@(kvp.Value?.Value)</td>
                        <td class="align-middle text-center">@(kvp.Value?.GetDiceRollValueString())</td>
                    </tr>
                    }
                    @if (freePointsToDistribute != null)
                    {
                    <tr>
                        <td />
                        <td />
                        <td />
                        <td class="align-middle text-center">@pointsDistributed / @freePointsToDistribute</td>
                        <td />
                        <td />
                        <td />
                        <td />
                    </tr>
                    }
                </tbody>
            </table>
        </RadzenCard>
    }
</div>


@code {
    [Parameter]
    public MagusTtkCharacter ttkCharacter { get; set; }

    [Parameter]
    public int? freePointsToDistribute { get; set; }

    public int pointsDistributed { get; set; }

    private int PointsDistributable
    {
        get { return (freePointsToDistribute ?? 0) - pointsDistributed; }
    }

    void OnAbilityDistributedPointsChanging(AbilityCompoundValue value, dynamic newValue)
    {
        var avc = value.GetValueComponentOrThrow(AbilityValueComponentTypeEnum.CharacterCreation);
        //System.Console.WriteLine($"{ability?.Definition?.Name} value is changing from {ability.Value} to {newValue}.");

        int diff = (int)newValue - avc.Value;
        diff = Math.Min(diff, this.PointsDistributable);

        if ((diff == 0))// || (freePointsToDistribute == null) || (freePointsToDistribute.Value == 0) || (pointsDistributed >= freePointsToDistribute.Value))
        {
            //System.Console.WriteLine($"{ability?.Definition?.Name} value change disabled: no free points to distribute.");
            return;
        }

        System.Console.WriteLine($"{value?.Definition?.Name} value component {avc.Value} of type {avc.Type} is changing by {diff.ToString("+##;-##;0")}.");
        //ability.SetComponentValue(AbilityValueComponentTypeEnum.CharacterCreation, (int)newValue);
        pointsDistributed += diff;

        avc.Value = (int)newValue;

        this.ttkCharacter.ChangeNotificationManager?.Changed(nameof(MagusTtkCharacter.Abilities), this.ttkCharacter.Abilities, this.ttkCharacter.Abilities);

        //this.StateHasChanged();
    }

    int? GetAbilityMin(AbilityCompoundValue abilityValue)
    {
        if (abilityValue?.Definition == null)
            return null;

        var min = ttkCharacter.GetAbilityValueMin(abilityValue.Definition.Code);

        System.Console.WriteLine($"{abilityValue.Definition.Name} Min set to {min}.");

        return min;
    }

    int? GetAbilityMax(AbilityCompoundValue abilityValue)
    {
        if (abilityValue?.Definition == null)
            return null;

        var max = ttkCharacter.GetAbilityValueMax(abilityValue.Definition.Code);
        if (max == null)
            return null;

        max = Math.Min(max.Value, abilityValue.Value + this.PointsDistributable);

        System.Console.WriteLine($"{abilityValue.Definition.Name} Max set to {max}.");

        return max;
    }

    void OnChange(dynamic value, string name)
    {
        //System.Console.WriteLine($"{name} value changed to {value}");
    }

    protected override Task OnInitializedAsync()
    {
        System.Console.WriteLine($"{this.GetType().Name}.OnInitializedAsync()");

        return Task.CompletedTask;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        System.Console.WriteLine($"{this.GetType().Name}.SetParametersAsync()");

        this.ttkCharacter?.ChangeNotificationManager?.Unsubscribe(this.OnModelChanged);

        return base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet()
    {
        System.Console.WriteLine($"{this.GetType().Name}.OnParametersSet()");

        RefreshPointsDistributed();

        //this.ttkCharacter?.ChangeNotificationManager?.Unsubscribe(this.OnModelChanged);
        this.ttkCharacter?.ChangeNotificationManager?.Subscribe(this.OnModelChanged, this.ModelChangeNotificationFilter);

        base.OnParametersSet();
    }

    private bool ModelChangeNotificationFilter(string changedFieldName)
    {
        return changedFieldName == nameof(MagusTtkCharacter.Class)
            || changedFieldName == nameof(MagusTtkCharacter.Race)
            //|| changedFieldName == nameof(MagusTtkCharacter.Abilities)
            ;
    }

    private Task OnModelChanged(string changedField, object prevValue, object newValue)
    {
        System.Console.WriteLine($"{this.GetType().Name}.OnModelChanged({changedField}, {prevValue}, {newValue})");

        this.StateHasChanged();

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        System.Console.WriteLine($"{this.GetType().Name}.Dispose()");

        this.ttkCharacter?.ChangeNotificationManager?.Unsubscribe(this.OnModelChanged);
    }

    private void RefreshPointsDistributed()
    {
        var newValue = 0;

        if (this.ttkCharacter != null)
        {
            foreach (var kvp in this.ttkCharacter.Abilities)
            {
                var avc = kvp.Value.ValueComponentsByType[AbilityValueComponentTypeEnum.CharacterCreation];

                newValue += avc.Value;
            }
        }

        if (pointsDistributed != newValue)
        {
            System.Console.WriteLine($"{this.GetType().Name}.RefreshPointsDistributed() is changing pointsDistributed from {pointsDistributed} to {newValue}...");

            pointsDistributed = newValue;

            //this.StateHasChanged();
        }
    }
}
